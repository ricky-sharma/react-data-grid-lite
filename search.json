[
  {
    "title": "📘 Introduction",
    "url": "",
    "content": "The React Data Grid Lite is a high-performance, customizable UI component designed to display large sets of structured data in a tabular format. Built for modern applications, this grid focuses on speed, flexibility, and ease of integration, making it ideal for both simple lists and complex enterprise-grade data views.\n🎯 Key Features\n\n⚡ Lightweight\nA small bundle footprint ensures your application loads fast, even on slower connections. The grid is optimized to avoid unnecessary re-renders, includes zero dependencies, and only loads what it needs. Ideal for SPAs and mobile-first experiences. By not including external dependencies, the grid remains lightweight and performs well across different use cases. Whether you're building small apps or large enterprise dashboards, this grid won't slow down your performance with unnecessary bloat.\n\n  \n\n🤖 AI-Powered Semantic Search\nTake your data grid to the next level with AI-powered semantic search using the OpenAI API—or any custom LLM endpoint. This feature interprets natural language queries and matches them intelligently to your grid data, opening up smarter filtering experiences.\n✅ Benefits\n\nEnables intuitive search: Users can search using phrases like “users aged above 30 and with role admin” instead of relying on exact keyword matches.\nSmooth integration with built-in search and pagination.\nAutomatic fallback to local filtering if AI search errors or is disabled.\n\n🧪 Example Usage\n<DataGrid\n  id=\"react-data-grid-lite\"\n  data={myData}\n  columns={myColumns}\n  options={{\n    aiSearch: {\n      enabled: true,\n      apiKey: 'your-openai-api-key', // Optional if using custom endpoint or logic\n      model: 'gpt-4',\n      endpoint: 'https://api.openai.com/v1/chat/completions',\n      headers: {\n        'Custom-Header': 'value'\n      },\n      systemPrompt: 'You are a helpful assistant for searching table data.'\n    }\n  }}\n/>\n\n\n📖 Where to Learn More\nVisit the AI Search documentation to explore configuration details—including custom headers, system prompt options, and behavior overrides.\n\n📦 API-ready\nreact-data-grid-lite is designed to work seamlessly with any JSON-based API. Whether your data is coming from a REST API, GraphQL endpoint, or any other JSON API, the grid can easily ingest and display the data without needing any heavy lifting on your part.\nimport React, { useEffect, useState } from 'react';\nimport DataGrid from 'react-data-grid-lite';\n\nconst MyGrid = () => {\n    const [rows, setRows] = useState([]);\n    const [columns, setColumns] = useState([]);\n\n    useEffect(() => {\n        fetch('/api/data') // Example API endpoint\n            .then(res => res.json())\n            .then(data => {\n                setColumns(data.columns);\n                setRows(data.rows);\n            });\n    }, []);\n\n    return <DataGrid data={rows} columns={columns} />;\n};\n\nWhy it matters: With the rise of APIs in modern web applications, being able to plug in data sources without complex transformations is a huge time-saver for developers.\n\n🛠️ Dynamic Columns\nSupport for schema-flexible data means you can generate column definitions on the fly. This is especially useful for dashboards or CMS systems where data models can vary.\nconst columns = Object.keys(data[0]).map(key => ({\n    name: key\n}));\n\n<DataGrid data={data} columns={columns} />;\n\nHere, columns are dynamically created based on the keys of the data object.\n\n🎨 Custom Cell Rendering\nTo customize how a specific cell is displayed, the columns definition can include a render function per column. This function receives the formatted row data, and the orignal row data, allowing full control over the rendering logic.\n✅ Add Icons or Badges\n{\n  name: 'role',\n  alias: 'Role',\n  render: (row) => (\n    <span>\n      {row.role === 'Admin' && '🛡️ '}\n      {row.role}\n    </span>\n  )\n}\n\n\n✏️ Cell & Row Editing\nThe grid supports inline cell editing with keyboard and touch support. It also provides callbacks and hooks for save, edit, and delete actions, allowing for customized editing workflows.\nconst options = {enableCellEdit: true}\n\n<DataGrid\n  data={rows}\n  columns={columns}\n  options={options}\n  onCellUpdate={(cellUpdate) => {\n    console.log(`Updated ${cellUpdate.editedColumns[0].colName} to ${cellUpdate.editedColumns[0].value}`);\n  }}\n/>\n\n\n🔍 Search & Aliases\nEnable powerful global and column-level search with support for aliases and custom labels. Searchable columns can be marked with enableSearch: true, and you can use user-friendly names (alias) without affecting the actual data structure.\n{ name: 'emailAddress', alias: 'Email', enableSearch: true }\n\n\n📌 Fixed Columns\nPin columns to the left side of the grid using a prop like fixed: true. This is great for keeping key identifiers (like names or IDs) visible while horizontally scrolling through wide datasets.\nconst columns = [\n    { name: 'ID', fixed: true },\n    { name: 'Name' },\n    { name: 'Email' },\n];\n\n<DataGrid data={rows} columns={columns} />;\n\n\n📏 Resizable Columns\nUsers can drag column borders to adjust widths, making it easier to view large or wrapped content. This is enabled via built-in support in v1.1.0+ and fires an onColumnResized callback.\nconst columns = [\n    { name: 'Name', resizable: true },\n    { name: 'Email', resizable: true },\n];\n\n<DataGrid data={rows} columns={columns} onColumnResized={(e, newWidth, columnName) => console.log(columnName, newWidth)} />\n\n\n📱 Responsive Layout\nThe grid layout adjusts to different screen sizes using width, maxWidth, height, and inherit props. It plays nicely with flexbox or grid-based layouts, ensuring content looks good on mobile, tablet, or desktop.\n<DataGrid width=\"100%\" height=\"60vh\" />\n\n\n🔄 Drag-and-drop\nreact-data-grid-lite supports column reordering via drag-and-drop. This feature allows users to rearrange columns dynamically for a more personalized data grid experience. The grid provides the onColumnDragEnd callback function to save the new column order to the database as a user preference.\nimport DataGrid from 'react-data-grid-lite';\n\nconst columns = [\n    { name: 'Name', draggable: true },\n    { name: 'Email', draggable: true },\n];\n\nconst MyGrid = () => {\n\n    const handleDragEnd = (columnName, newColumnOrder) => {    \n        // Save the new column order to the database as a user preference\n        saveColumnOrderToDB(newColumnOrder)\n           .then(() => {\n              console.log('Column order saved successfully');\n        })\n    };\n    return (\n        <DataGrid\n            data={rows}\n            columns={columns}\n            onColumnDragEnd={handleDragEnd}\n        />\n    );\n};\n\nWhy it matters: Allowing users to reorder columns helps them tailor the grid to their needs, improving usability and efficiency.\n\n🔢 Column order\nSet the order of columns using the order property on the column configuration.\nconst columns = [\n    { name: 'Name', order: 2 },\n    { name: 'Email', order: 1 },\n];\n\n<DataGrid data={rows} columns={columns} />;\n\nThe order property allows you to set the initial order of columns.\n\n🧩 Merged Columns\nDisplay composite values by merging multiple fields into a single cell. For example, show firstName + lastName in one column.\n{ \n    name: 'firstname',\n    alias: 'Name',\n    concatColumns: { \n        columns: ['firstname', 'lastname'] \n    }\n}\n\n\n📊 Analytics Events\nTrack interactions such as row clicks, sort changes, and searches using event callbacks. Useful for product analytics (e.g., Mixpanel, GA) or auditing user behavior.\nonRowClick={(e, row) => logEvent('row_clicked', row)}\n\n\n🎨 Theming\nApply visual consistency with predefined themes like blue-core, dark-stack, and medi-glow. You can also pass in custom CSS classes or override default styles for headers, rows, hover states, etc.\n<DataGrid theme=\"dark-stack\" />\n\n🧾 CSV Export\nAllow users to download the currently viewed data as a .csv file. Ideal for admin panels, reporting dashboards, or finance tools. Supports exporting filtered or paginated data.\n\n✏️ Row Actions\nBuilt-in hooks for common actions like edit, delete allow you to bind behavior directly to row-level operations.\n\n🧩 Actions Align\nUse props like actionColumnAlign: 'right' or actionColumnAlign: 'left' to pin action column to one side, keeping UI controls consistent regardless of scroll position.\n\n🧪 Fully Tested\nThe component comes with strong unit and integration test coverage, ensuring high reliability. Common scenarios — like rendering, sorting, searching, and resizing — are validated against regressions using tools like Jest and React Testing Library.\n\n✅ Pagination\nBuilt-in page handling with control over pageSize, currentPage, and callbacks like onPageChange.\n✅ Search & Filtering\nGlobal or per-column search capabilities for fast data filtering.\n✅ Event Hooks\nCallback props such as onRowClick, onSearchComplete, onSortComplete, and onColumnResized provide full lifecycle control.\n\n\n  \n\n\n📦 Installation\nnpm install react-data-grid-lite\n\nor\nyarn add react-data-grid-lite\n\n\n🚀 Usage\nimport React from 'react';\nimport DataGrid from 'react-data-grid-lite';\n\nconst columns = [\n  { name: 'id', width:'50px' },\n  { name: 'name', alias:'Full Name' },\n  { name: 'age' }\n];\n\nconst rows = [\n  { id: 1, name: 'John Doe', age: 28 },\n  { id: 2, name: 'Jane Smith', age: 34 }\n];\n\nfunction App() {\n  return (\n    <DataGrid columns={columns} data={rows} />\n  );\n}\n\nexport default App;\n\n\nReact Compatibility Table\nThe react-data-grid-lite library is compatible with the following versions of React:\n\n\n\nReact Version\nCompatibility\n\n\n\n\nReact 19+\n✅ Fully Compatible\n\n\nReact 18+\n✅ Fully Compatible\n\n\nReact 17+\n✅ Fully Compatible\n\n\n\n\n🚀 Try It Out!\nFeel free to fork the repository and experiment with the grid's behavior for concatenating columns. Let me know if you'd like any further adjustments or clarification! Happy coding! 🎉\n\n📄 License\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n🙋‍♂️ Available for freelance work!\nReach out via LinkedIn or check out my projects on GitHub."
  },
  {
    "title": "⚖️ License",
    "url": "license.html",
    "content": "MIT License\nCopyright (c) 2025 Vinay Sharma\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  {
    "title": "Search",
    "url": "search.html",
    "content": "Search\n          \n        \n      \n\n      \n        \n      \n    \n\n    \n    \n      \n  document.getElementById(\"searchInput\").addEventListener(\"keydown\", function (event) {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      search();\n    }\n  });"
  },
  {
    "title": "🖥️ Live Demo",
    "url": "demo.html",
    "content": ""
  },
  {
    "title": "🔍 Advanced Usage",
    "url": "advanced.html",
    "content": "📑 Concatenating Columns\nIn some scenarios, you may want to combine data from multiple columns into a single column for display and editing within your data grid. The react-data-grid-lite component supports this via the concatColumns property.\nThis feature is useful when you want to show a combined value, such as Department and Title, as a single field (e.g., \"HR - Manager\") instead of displaying them separately. The concatColumns property lets you specify which columns to concatenate, the separator between values, and how each field is edited.\n⚙️ Configuration\nYou define a concatenated column by specifying the base column (which will show the combined value) and the concatColumns config describing:\n\nWhich columns to combine\nThe separator between values\nEditor configurations for each concatenated field (optional)\n\nexport const columns = [\n  { name: 'ID', width: '80px' },\n  { name: 'Name', alias: 'Full Name' },\n  {\n    alias: 'Department - Title',\n    name: 'Department',\n    concatColumns: {\n      columns: ['Department', 'Title'],        // Columns to concatenate\n      separator: ' - ',                        // Separator string\n      editor: [                               // Editor config for each field (optional)\n        {\n          type: 'select',\n          values: [\n            { label: 'HR', value: 'HR' },\n            { label: 'Engineering', value: 'Engineering' },\n            { label: 'Marketing', value: 'Marketing' }\n          ]\n        },\n        {\n          type: 'select',\n          values: [\n            { label: 'Manager', value: 'Manager' },\n            { label: 'Lead', value: 'Lead' },\n            { label: 'Intern', value: 'Intern' }\n          ]\n        }\n      ]\n    }\n  },\n  { name: 'Title' },\n  { name: 'Email' },\n  { name: 'Salary', formatting: { type: 'currency' } }\n];\n\n📝 Explanation:\n\n\nname: 'Department'\nThe main column to display the concatenated value.\n\n\nalias: 'Department - Title'\nThe header label for the concatenated column.\n\n\nconcatColumns.columns\nAn array of the column names whose values will be combined.\n\n\nconcatColumns.separator\nThe string that separates the concatenated values in the display.\n\n\nconcatColumns.editor\nAn array specifying editors for each concatenated field. Editors can be shorthand strings (e.g., 'text', 'select') or detailed objects with dropdown values.\n\n\n📊 Example Dataset\n\n\n\nID\nName\nDepartment\nTitle\nEmail\nSalary\n\n\n\n\n1\nJohn Doe\nHR\nManager\njohn.doe@example.com\n$5000\n\n\n2\nJane Smith\nEngineering\nLead\njane.smith@example.com\n$5500\n\n\n\nResulting Display\n\n\n\nDepartment - Title\n\n\n\n\nHR - Manager\n\n\nEngineering - Lead\n\n\n\nWhen you edit the Department - Title column, it shows two select dropdowns side-by-side (or in sequence), letting users update Department and Title individually.\n🔄 Use Cases\n\nFull Name: Combine FirstName and LastName columns for display and editing as one field.\nFull Address: Concatenate street, city, and country columns.\nProduct Details: Combine product name and variant (e.g., color or size).\nDepartment and Role: As shown, combine department and job title for concise display.\n\n🔄 Additional Notes\n\n\nCustom Separators\nYou can change the separator string to anything: spaces, commas, slashes, etc.\n\n\nEditor Defaults\nIf you don’t provide concatColumns.editor, each field defaults to a text input when editable.\n\n\nData Integrity\nThe concatenated column does not create a new column in your dataset. Instead, it displays combined values from existing columns and updates them individually when edited.\n\n\n📌 Important\n\nConcatenation is purely a display and editing convenience. Your underlying data structure remains unchanged. When a concatenated cell is edited, each part updates its respective original column.\n\n\n\n📐 How Column Width is Computed (for Version 1.1.0 and Above)\nThe grid intelligently calculates column widths based on a mix of fixed, flexible, and fallback strategies. Here's how it works:\n🧾 General Rules\n\nAll column widths are ultimately returned in px.\nInvalid, negative, or missing widths fall back to the default value defined as Fallback_Column_Width in constants.js.\nPercentage (%) widths are converted to pixels based on the container width.\n\n🖥️ Desktop Mode\n🔹 Scenario 1: All Columns Have Fixed Widths\n\n\nIf all visible columns have defined widths:\n\nIf the total fixed width exceeds the container, columns retain their set widths.\nIf the total is less than the container width, all columns are evenly stretched.\n\n\n\n🔹 Scenario 2: Mixed Fixed and Flexible Columns\n\nFixed-width columns retain their pixel values.\nRemaining width is evenly distributed among flexible columns.\nIf a flexible column lacks a valid width, it receives an equal share of the remaining space.\nEach flexible column will receive at least the default value specified by Fallback_Column_Width.\n\n🔹 Scenario 3: All Columns Are Flexible (No Valid Widths)\n\nThe container width is evenly divided among all visible columns.\nEach column receives at least the default value specified by Fallback_Column_Width.\n\n⚠️ Fallbacks & Edge Cases\n\nIf no visible columns are found, a default width of 100% is returned.\nIf a column has a % width like \"20%\", it's converted to pixels based on the container size.\nWidths like \"abc\", \"-100px\", null, or undefined are treated as invalid and fall back to the default value specified by Fallback_Column_Width.\n\n\n📏 Column Width Calculation – Explained Simply (for Version 1.0.5 and Below)\nThis logic automatically adjusts column widths based on how the grid is set up:\n\n\nFixed + Flexible Columns\nIf some columns have fixed widths and others don’t, it calculates the remaining space and distributes it evenly among the flexible columns.\n\n\nAll Columns Fixed Width\nIf all visible columns have fixed widths but don’t fill the grid, it stretches them to fit the full width.\n\n\nAll Columns Flexible\nIf no fixed widths are defined, the columns are given equal space in percentages, and adjusted to avoid leaving empty space.\n\n\nMobile Devices\nOn smaller screens, columns are either given a fixed mobile-friendly width or stretched to fit the screen without breaking layout.\n\n\nResponsive to Container Width\nThe logic automatically recalculates widths based on the container’s size and optional buttons.\n\n\n\nPerformance Tips\n\nUse pagination to limit rows rendered at a time.\nConsider lazy loading or virtualized lists for extremely large datasets.\n\n\nExport & Download\n\nUse onDownloadComplete to trigger analytics or email notifications.\nCSV export respects current sorting and filtering."
  },
  {
    "title": "📌 Changelog",
    "url": "changelog.html",
    "content": "All notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,  and this project adheres to Semantic Versioning.\n\n🔖 v1.2.2 – Released 2025-08-17\n🚀 Features\n\n\nSelection Column Support\n\nAdded enableRowSelection prop to toggle the selection column.\nAdded rowSelectColumnAlign prop to control selection column alignment ('left' | 'right' | '').\nAdded onRowSelect callback for handling individual row selection.\nAdded onSelectAll callback for selecting/deselecting all rows on the current page.\n\n\n\nSorting Enhancements\n\nAdded global enableSorting prop and column-level sortable prop.\nAdded missing resize handle on the last column. Resizing was already supported, but the handle was not rendered, which affected usability.\nImproved column state retention after interactive actions (e.g., checkbox changes).\n\n\n\nGrid API (via ref)\n\n\nExposed new imperative methods like clearSelectedRows().\n\n\nAdded documentation: /docs/datagrid_ref_methods.md detailing all available ref methods:\n\ngetFilteredRows()\ngetFilteredSelectedRows()\ngetAllSelectedRows()\ngetCurrentPage()\nresetGrid()\nclearSelectedRows()\n\n\n\n\n\n🐛 Fixes\n\nUI layout now correctly adjusts based on the grid container’s width instead of the viewport width.\nImproved layout styling for small grid widths (header, footer, and grid spacing).\n\n🧼 Refactors\n\n\nColumn & Grid Processing\n\n\nMoved column processing to new useProcessedColumns hook:\n\nImproved handling of column ordering, displayIndex, and hidden columns.\n\n\n\nExtracted handleResetGrid into a reusable useResetGrid hook.\n\n\nRefactored useProcessedData for cleaner data flow and better testability.\n\n\nExtracted grid API logic into useGridApi with useImperativeHandle.\n\n\n\n\nSearch & Sort Logic\n\n\nExtracted logic to a dedicated useSearchAndSortCallbacks hook with full test coverage.\n\n\nRenamed:\n\neventGridSearchClicked → eventGridSearchTriggered\nFile: event-grid-search-clicked → event-grid-search-triggered (for clarity and naming consistency).\n\n\n\n\n\n✅ Tests\n\n\nAdded unit tests for:\n\nColumn processing\nGrid API methods\nData processing and AI search\nError handling\nSorting and filtering behaviors\n\n\n\n\n✨ v1.2.1 – Released 2025-08-10\n✨ Features\n\n\nAdd ErrorBoundary to DataGrid\n\nPrevents the entire app from crashing due to unhandled errors inside the grid.\nProvides a fallback UI and improved resilience.\n\n\n\nLogging Enhancements\n\nIntroduced logDebug(debug, type, ...args) utility for level-based, prefixed logging.\nSupports log levels: 'log', 'warn', 'error', 'info'; gracefully falls back to console.log.\nLogging is automatically disabled when debug is false.\nExposed a new debug prop for grid users to enable debug logging (e.g., in production troubleshooting).\nIntegrated debug control through grid config and internal hooks.\nFull Jest test coverage for logDebug, including edge cases and fallback scenarios.\n\n\n\nPagination Improvements\n\n\nAdded a \"Rows per page\" selector to the DataGrid.\n\nAllows users to select from predefined options (5, 10, 25, 50, 100, 250, 500).\nPagination updates dynamically based on the selected value.\nEnhances performance and UX on large datasets.\n\n\n\n\n\nGrid Footer Customization\n\n\nIntroduced new props for fine-grained control over the footer:\n\nshowPageInfo\nshowPageSizeSelector\nshowNumberPagination\nshowSelectPagination\n\n\n\n\n\n♻️ Refactor\n\nImproved UI alignment and layout for a cleaner experience.\nRemoved redundant code and improved overall readability and maintainability.\n\n✅ Tests\n\nExtended and updated unit tests for all new features and configuration options.\nVerified pagination behavior and logging functionality under various conditions.\n\n\n🔖 v1.2.0 – Released 2025-08-06\n✨ Added\n\nAI-powered search support integrated into the DataGrid using the OpenAI API.\nConfigurable options for AI integration: API key, model, endpoint URL, system prompt, and custom headers.\nFull JSON data filtering via AI, interpreting natural language queries for intelligent results.\nSeamless integration of AI search with existing search and pagination logic.\nHooks and configuration options to allow users to customize or override AI search behavior.\nFallback to local (non-AI) search if AI fails, is disabled, or returns an error.\nComprehensive documentation added for setting up and using AI search.\n\n🔧 Improved\n\nGlobal search integration refined to support AI search without interfering with local search behavior.\nHandled edge cases where data is modified during partial input in global search.\nDebounced input and improved search logic to prevent stale state or race conditions.\n\n✅ Updated\n\nUnit tests expanded to cover AI search scenarios.\nCore logic refactored for cleaner integration between global and AI-powered search paths.\n\n\n📝 v1.1.11 – Released 2025-08-03\n🐛 Bug Fixes\n\nFixed issue where sorting was reset when clicking on interactive custom fields\nFixed issue where the search result was reset when interacting with custom field elements (e.g., checkboxes)\nCorrected cursor style when onRowClick is enabled\nDecreased row click delay from 400ms to 200ms for snappier interaction\n\n🎨 UI & Theme Updates\n\nChanged default grid background color from #f5f1f1 to #ffffff\nUpdated default header background and font color from #667 to #0c0c0c\nImproved visual consistency across the grid layout\n\n✨ Features\n\nAdded background color customization for grid layout\n\nNew props: gridBgColor, headerBgColor\n\n\n\n🧪 Tests\n\nUpdated test cases and performed related code cleanup\n\n\n✨ v1.1.10 – Released 2025-07-31\nFeatures & Enhancements\n\n\n✅ Debounced search input to improve performance during rapid typing on large datasets.\n\n\n✅ Improved column ordering logic:\n\nColumns with the same order value are now grouped and sorted alphabetically.\nColumns with high order values (e.g. 99) are now placed correctly at the end.\n\n\n\n🎨 New styling props:\n\ncellStyle: Apply custom styles directly to <td> cells.\nheaderStyle: Apply custom styles to <th> (header) cells.\n\n\n\n💅 UI enhancements:\n\nAdded box-shadow to the grid table and outer container for improved visual styling.\nGeneral CSS styling refinements.\n\n\n\nCode Quality\n\n\n🧹 ESLint config cleaned:\n\nSuppressions (no-unused-vars, react/prop-types, react/display-name, no-prototype-builtins) moved to eslint.config.mjs.\nRemoved inline eslint-disable comments from source files.\n\n\n\nTests\n\n🧪 Test cases updated and aligned with recent changes.\n\n\n🔖 v1.1.9 – Released 2025-07-26\nUI Enhancements\n🛠 Paging Improvements\n\nFixed an issue where the paging drop-down retained keyboard focus, blocking navigation. Focus now shifts correctly after interaction.\nUpdated CSS styling for both the paging drop-down and paging numbers for improved consistency.\n\n🎨 UI Improvements\n\nDecreased horizontal scrollbar height from 10px to 8px for a sleeker look.\nAdded a 4px gap between elements in editable cells to improve spacing and readability.\n\n📚 Code Example Updates\n\nRefreshed and expanded code examples to reflect recent UI changes.\n\n\n📝 v1.1.8 – Released 2025-07-18\nEnhancements, Fixes & Refactors\n🛠️ Bug Fixes\n\nSort Icon Alignment: Fixed an issue where the sort icon would shift to the right after clicking the sort button.\nGrid Container Width: Resolved an issue causing the grid container to initially load with incorrect width, pushing the last column beyond the frame.\nDropdown Positioning: Fixed a brief mispositioning of the options menu on initial render in editable cells.\nIcon UI Issues: Addressed visual inconsistencies across various UI icons.\n\n🎨 UI Improvements\n\nUpdated border-radius for buttons, text boxes, and dropdowns for a cleaner, more consistent appearance.\nImproved general UI styling and layout.\nAdded column name to the default placeholder in the column search field.\n\n⚙️ Features & Enhancements\n\nGridContext Added: Introduced GridContext for sharing state and setState with child components.\nScoped Container Identifiers: Container_Identifier is now scoped using gridID, allowing support for multiple grid instances.\n\n🔧 Performance & Refactoring\n\n\nWrapped multiple functions with useCallback for better rendering performance.\n\n\nGridGlobalSearchBar:\n\nNow uses GridConfigContext instead of direct props.\nWrapped in React.memo to reduce unnecessary re-renders.\nUpdated related test cases.\n\n\n\nGridPagination & GridFooter:\n\nMigrated to use GridConfigContext with memoization.\nWrapped both in React.memo.\nUpdated tests accordingly.\n\n\n\nGridCell Refactor:\n\nMoved <td> rendering logic to grid-cell.jsx.\nUpdated associated test coverage.\n\n\n\n\n🔖 v1.1.7 - Released 2025-07-15\n🛠 Fixes\n\n\nSynchronized cell updates between grid state and full dataset:\n\nInjected __$index__ into each row of dataReceivedRef to track and update rows accurately.\nModified onCellChange and revertChanges to reflect updates in both paginated/filtered view and the original dataset.\n\n\n\n🔍 Search Enhancements\n\n\nImproved grid search to support:\n\nMulti-word queries\nDiacritic-insensitive matching (e.g. café → cafe)\nSpecial character handling\nConcatenated column search with customizable separators\n\n\n\nExtracted formatting and normalization into helper utilities for reusability.\n\n\n🧱 Refactors\n\n\nExtracted core cell editing logic into reusable hooks:\n\nuseCellRevert\nuseCellCommit\nuseCellChange\n\n\n\nBenefits:\n\nCleaner separation of concerns\nBetter testability and modularity\nHooks include configure method to inject state context\nExtensive unit tests added for edge cases and update flows\n\n\n\n🎨 UI\n\nUpdated default theme background color from #e0e0e0 to #f5f1f1 for a softer look.\n\n\n🔖 v1.1.6 - Released 2025-07-12\n🆕 New Features\n\n\nAdded grid configuration props:\n\nrowHeight: Define row height using pixel or percentage values\nshowResetButton: Toggle a reset button in the toolbar\nshowToolbar: Show or hide the toolbar section\nshowFooter: Show or hide the table footer\n\n\n\nSearch customization:\n\nglobalSearchPlaceholder: Customize the placeholder for global search input\nsearchPlaceholder: Customize search input placeholders for individual columns\n\n\n\n🎨 UI & Style Improvements\n\nUpdated global search placeholder from \"Global Search\" to \"Search all columns…\"\nUpdated sort icon styles; removed unnecessary transform\nReduced minimum column width to 75px, and mobile column width to 125px\nRemoved td borders and added 2px bottom border to tr for better visual separation\nReduced table header font size to 18px for screens wider than 1200px; removed !important from font-size rule\nSet minimum grid frame width to 250px\nRefactored CSS for improved consistency and maintainability\n\n\n📝 v1.1.5 - Released 2025-07-09\n🚀 Features\n\n\nCell Editing Enhancements\n\nAdded cell editing functionality with dynamic input rendering.\nIntroduced onCellUpdate callback to handle cell value updates.\nAdded enableCellEdit prop to globally enable/disable editing.\nImplemented keyboard-based navigation across cells using a custom hook.\nEnabled double-tap edit support on mobile via useDoubleTap hook.\nAdded editable column-level prop to control which columns are editable.\n\n\n\nDropdown Field Support\n\nAdded dropdown support in cell editing mode.\nDropdown supports objects with label and value keys.\n\n\n\nAccessibility & UI Improvements\n\nImproved keyboard accessibility for dropdowns (arrow keys, Enter, Escape).\nMade Reset Filters and Export CSV buttons accessible via keyboard and screen readers.\nAdded accessibility support for row edit and delete buttons.\n\n\n\n🔧 Refactors\n\nExtracted editable cell logic into editable-cell-fields.jsx for modularity.\nRestructured editable cell components for better separation of concerns.\nMoved input.jsx and dropdown.jsx to a new custom-fields folder.\nRelocated editable-cell-fields.jsx to a new grid-edit folder for clarity.\nImproved focus handling and commit/revert behavior during editing.\n\n\n📦 v1.1.4 - Released 2025-06-30\n✨ Features\n\n\nDraggable Columns & Custom Order Support\n\n\nAdded drag-and-drop functionality for column reordering.\n\n\nAdded order property to column config for per-column order control.\n\n\nIntroduced enableColumnDrag prop at the grid level to toggle the drag-and-drop feature.\n\n\nAdded draggable flag in column config for individual column control.\n\n\nEnhanced useDraggableColumns hook with:\n\nMobile touch support\nCross-platform improvements\n\n\n\n\n\nDrag-and-Drop Callback & Prop Improvements\n\n\nIntroduced onColumnDragEnd callback for handling column drag completion.\n\n\nUpdated documentation with usage guides for:\n\nDrag-and-drop setup\nRelevant props and configurations\n\n\n\n\n\nRefactored code for clarity, maintainability, and improved performance.\n\n\nUpdated ESLint configuration to enhance code quality.\n\n\nAdded tests for the useDraggableColumns hook.\n\n\nAdded typeof checks for boolean props to ensure type safety.\n\n\n🎨 UI Improvements\n\nUpdated CSS to improve layout consistency and visual clarity.\nAvoided style conflicts by not overriding existing styles, ensuring stability across components.\n\n\n📦 v1.1.3 – Released 2025-06-26\nFeature: Custom Cell Rendering + UI Improvements\n✨ New\n\n\nrender prop for columns – Allows custom rendering of individual cells using a render function.\nExample:\n{\n  key: 'status',\n  header: 'Status',\n  render: (formattedRow, baseRow) => <strong>{formattedRow.status}</strong>\n}\n\n\n\n♻️ Refactor\n\nExtracted reusable internal rendering logic to support the new render prop cleanly.\nRefactored and reorganized CSS for improved structure and maintainability.\n\n📚 Examples\n\nUpdated existing examples and added new ones to demonstrate custom cell rendering using the render prop.\n\n💅 UI\n\nMinor UI refinements for better visual alignment and responsiveness.\n\n\n📦 v1.1.2 - 2025-06-23\n✨ Features\n\nDataGrid: Added currentPage prop to allow initialization of grid with a specific page (supports query strings, bookmarking, etc.).\nDataGrid: Renamed searchEnable to enableSearch for clearer naming (backward compatibility removed).\nResponsive UX: Disabled fixed columns for screen widths under 701px to improve usability on smaller devices.\n\n🛠 Fixes\n\nUI: Resolved layout issues with the “Clear Filter” button on mobile by applying responsive UI tweaks.\nTheme Compatibility: Updated box-shadow from 0.3px to 1px to resolve border rendering issue on Mozilla Firefox.\n\n🎨 Styling\n\nMobile Styling: Adjusted padding for better visual consistency in the new responsive theme.\n\n\n📦 v1.1.1 - 2025-06-19\n🚀 Features\n\n\nTheme Support in DataGrid\n\nAdded theme prop to DataGrid for applying visual themes.\nIntroduced three themes: blue-core, dark-stack, medi-glow.\nRefined default theme for better visual consistency.\nUpdated example project with themed demos and improved folder structure.\n\n\n\nCustom Dropdown Component\n\nReplaced native <select> with a fully accessible and stylized custom Dropdown.\nSupports keyboard navigation, outside click detection, and auto-scroll to selected.\nImproves UX with better control, accessibility, and styling flexibility.\n\n\n\nColumn Search & Header Enhancements\n\nMade column search inputs controlled via internal state.\nAdded clear (×) icons to reset individual filters.\nPrevented accidental sort triggering during column resize.\nEnsured reliable onChange behavior for all filter inputs.\n\n\n\nConfigurable Actions Column Alignment\n\nAdded support to align the Actions column left or right using a new prop.\n\n\n\n\n📦 CSV Export Improvements\n\nExported CSV now includes only visible columns from the grid.\nValues are exported with formatted output (e.g., date, currency).\nSupports concatenated/derived columns (e.g., full name).\nOutput is now aligned with what's rendered in the UI, rather than raw data.\n\n\n🔧 Resize Callback Update\n\nResize callback now includes a gridId parameter for scoped column resizing support across multiple grids.\n\n\n🛠 Refactoring\n\n\nSort Icon Logic Refactor\n\nReplaced DOM-based logic with state-driven sort handling.\nIntroduced ColumnSortIcon component for dynamic rendering.\nAdded full reset support to clear all sorts and restore original data.\n\n\n\nUtility Cleanup\n\nMoved showLoader and hideLoader logic to a shared utils/ directory.\n\n\n\nSVG Migration\n\nReplaced CSS-based icons with SVGs for better visual performance and consistency.\n\n\n\n\n✅ Tests\n\nUnit Tests Added (Jest + React Testing Library):\n\nDropdown: open/close logic, outside click handling, option selection, clear icon\nInput: default props, controlled behavior, onChange handler, clear button\napplyTheme: theme mapping for valid/invalid inputs\nColumnSortIcon: icon state for asc, desc, and default\n\n\nFixed component behavior based on test coverage feedback.\n\n\n📦 v1.1.0 – Feature Enhancements, UI Improvements & GitHub Pages Deployment\nRelease Date: 2025-06-11\n✨ New Features\n\n\nFixed Columns Support\nAdded support for fixed (sticky) columns via a fixed property in column definitions. Enhances table usability during horizontal scrolling.\n\n\nResizable Columns (Experimental)\nIntroduced column resizing with live drag interaction. Includes onColumnResized callback for external state sync.\n\n\nDynamic Column-Class Styling\nEnabled runtime assignment of CSS classes to columns for greater flexibility in UI theming.\n\n\nGitHub Pages Deployment\nConfigured GitHub Pages deployment using gh-pages and updated homepage field in package.json.\n\n\n\n🛠️ Improvements\n\n\nPaging Controls UX\nPagination UI now automatically hides when dataset is empty to reduce visual clutter.\n\n\nDynamic Row-Column Alignment\nRow data now dynamically maps to current column configuration, enabling runtime column reordering without breaking layout or data mapping.\n\n\nColumn Width Handling\nEnhanced logic to retain or recalculate widths when columns are re-ordered or updated dynamically.\n\n\nGrid Layout Refactor\nIntroduced a new GridTable component (grid-table.jsx) to modularize rendering logic.\nUpdated CSS to support sticky positioning for scrollable sections.\n\n\nExport Button Logic\nDisabled \"Export CSV\" when no data is available, improving UX and preventing invalid actions.\n\n\nGlobal Search Fix\nResolved issue where global search omitted valid matches due to incorrect column indexing.\n\n\n\n🧪 Testing & Stability\n\n\nRefactored useState usage for consistent handling of dynamic updates.\n\n\nAdded null checks and guards in column config logic.\n\n\nExpanded test suite with cases for:\n\nFixed and resizable columns\nGrid responsiveness and dynamic layout\n\n\n\nAchieved 80%+ code coverage.\n\n\nUpdated data loader:\n\nImproved loading spinner positioning with modern dot style\nAdded scoped messaging and duplicate prevention logic\n\n\n\n\n🧹 Misc\n\nRestructured CSS for better sticky layout handling\nCleaned up layout and rendering logic for long-term maintainability\n\n\n[1.0.5] - 2025-06-04\nAdded\n\nTesting: Set up Jest for unit testing and added initial test configuration.\nTests: Implemented test cases to achieve over 80% coverage across statements, branches, functions, and lines.\nCompatibility: Added support for React 17+ and verified functionality in React 17+ environments.\n\nChanged\n\nDocumentation:\n\nMoved usage example from api.md to a new examples.md.\nUpdated README.md to include a link to examples.md alongside the existing API documentation.\n\n\nRefactor:\n\nMigrated the entire DataGrid package to React functional components for improved maintainability and performance.\nConverted Datagrid component in react-data-grid-lite.jsx from a class to a functional component.\nRefactored eventGridSearchClicked in event-grid-search-clicked.js to streamline logic and reduce bundle size.\nSimplified the format function API by removing the currencyCode argument and using the format parameter as the currency code instead.\n\n\nCode Quality: Refactored and improved code based on insights from test results.\n\nFixed\n\nProps Handling: Added an id prop to DataGrid, defaulting to id-<randomNumber> if not explicitly provided.\n\n\n[1.0.4] - 2025-05-29\nAdded\n\ngrid-footer.jsx: New functional component to manage pagination footer layout.\nformat_guide.md: Documentation with examples for format() and formatDate() utilities, including supported types and formats.\nIcon added to the Actions column for clearer interaction.\nGlobal search bar refactored into a functional component with enhanced support for smaller screens.\n\nChanged\n\nRefactored grid-header.jsx, grid-rows.jsx, and grid-pagination.jsx to improve structure, maintainability, and loading performance.\nUpdated package.json description for better clarity.\nReplaced deprecated rollup-plugin-strip with @rollup/plugin-strip in Rollup configuration.\n\nFixed\n\nSorting icon alignment issues, including conflicts introduced by the new Actions column icon.\nLoader (loading spinner) alignment issue — previously rendered off-screen, now centered properly.\nMinor layout inconsistencies and CSS bugs in grid components.\nInconsistent date formatting in grid display logic.\n\n\n[1.0.3] - 2025-05-25\nAdded\n\nData Loading Enhancements: Integrated trackPromise into the export flow in index.js to improve loading state handling.\nNew Events:\n\nonSortComplete — Triggered after sorting finishes. Provides event object, sorted columns (array), sorted data, and sort order (asc/desc).\nonSearchComplete — Triggered after a search operation. Includes the search query, matching columns, result set, and match count.\nonPageChange — Fires on pagination changes with detailed context including current and previous page numbers, row counts, and the index of the first row on the new page.\nonDownloadComplete(e, filename, blob) — Enables post-download handling such as logging, notifications, or emailing downloaded files.\n\n\nChangelog Initialization: Added CHANGELOG.md file for version tracking and release documentation.\n**Introduced a structured docs/ folder with dedicated markdown files:\n\napi.md for component props and configuration options\nevents.md for event callback documentation\nstyling.md for theming and CSS customization\nadvanced.md covering column width logic, performance tips, and export handling\n\n\nUpdated README.md with links to the new documentation files for improved maintainability and developer onboarding\n\nChanged\n\nSorting Functionality:\n\nAdded support for multi-column (concatenated) sorting.\nImproved sorting for UUIDs, email addresses, numeric values, currency, and date columns — in both ascending and descending orders.\n\n\nPagination UI & CSS:\n\nRefined pagination interface for better usability.\nFormatted and cleaned related CSS for maintainability.\n\n\nCode Formatting: General code cleanup for consistency and readability.\n\nFixed\n\nColumn Width Logic: Improved column resizing behavior to better support:\n\nFixed + flexible column layouts.\nAll-fixed column grids (auto-stretch to fill).\nFully flexible columns (equal distribution with no gaps).\nMobile responsiveness and dynamic container resizing with action buttons.\n\n\n\nOptimized\n\nBundle Size: Reduced overall npm package size by removing unused styles, optimizing CSS.\n\n\n[1.0.2] - 2025-05-21\nFixed\n\nFixed an issue with sorting columns that contain currency-formatted values.\n\n\n[1.0.1] - 2025-05-21\nRemoved\n\nRemoved prop-types package from dependencies.\n\n\n[1.0.0] - 2025-05-21\nAdded\n\nInitial release of the NPM package."
  },
  {
    "title": "🧮 DataGrid",
    "url": "api.html",
    "content": "A lightweight, high-performance, and customizable data grid component for React, ideal for rendering large data sets with support for sorting, searching, pagination, theming, and responsive layouts.\n\n\n\nProp\nType\nDescription\nDefault Value\nRequired\n\n\n\n\ncolumns\nArray\nArray of column definitions. Each column can have properties like name, width, 'alias', 'enableSearch', 'hidden'  etc.\n-\nYes\n\n\ncurrentPage\nstring / number\nLoads the data grid with the specified page number. Useful with query string params for deep linking or bookmarking.\n-\nNo\n\n\ndata\nArray\nArray of objects representing the rows of data to display.\n-\nYes\n\n\nheight\nstring / number\nThe height of the grid. Can be a pixel value (e.g., '300px') or a percentage (e.g., '100%'). Recommended for optimal display of the column.\n'60vh'\nNo\n\n\nid\nstring\nUnique ID for the DataGrid component. Defaults to a random ID in the format id-<randomNumber> if not provided.\n-\nNo\n\n\nmaxHeight\nstring / number\nThe maximum height of the grid.\n'100vh'\nNo\n\n\nmaxWidth\nstring / number\nThe maximum width of the grid.\n'100vw'\nNo\n\n\nonCellUpdate\nfunction\nCallback triggered when a cell edit is saved (e.g., on Enter key press or on cell blur). Receives an object containing details of the updated row and changed cells.\n-\nNo\n\n\nonColumnDragEnd\nfunction\nCallback function triggered after a column is dragged and dropped.\n-\nNo\n\n\nonColumnResized\nfunction\nCallback function triggered after a column is resized.\n-\nNo\n\n\nonPageChange\nfunction\nCallback function triggered when the user navigates to a different page.\n-\nNo\n\n\nonRowClick\nfunction\nCallback function triggered when a row is clicked. The clicked row data is passed as an argument.\n-\nNo\n\n\nonRowHover\nfunction\nCallback function triggered when a row is hovered over.\n-\nNo\n\n\nonRowOut\nfunction\nCallback function triggered when the mouse leaves a hovered row.\n-\nNo\n\n\nonRowSelect\nfunction\nCallback function triggered when a row is selected using the selection column. Available in version 1.2.2 and above.\n-\nNo\n\n\nonSearchComplete\nfunction\nCallback function triggered after a search operation.\n-\nNo\n\n\nonSelectAll\nfunction\nCallback function triggered when all rows on the current page are selected by clicking the selection column header. Available in version 1.2.2 and above.\n-\nNo\n\n\nonSortComplete\nfunction\nCallback function triggered after sorting finishes.\n-\nNo\n\n\noptions\nobject\nAn object for additional customization. Contains options like gridClass, enableGlobalSearch, etc.\n-\nNo\n\n\npageSize\nstring / number\nNumber of rows per page for pagination. If null or not provided, pagination is disabled.\n-\nNo\n\n\ntheme\nstring ('blue-core' | 'dark-stack' | 'medi-glow' | '')\nApplies a predefined visual theme to the grid. Affects header background, grid body background, borders, and control colors. Use an empty string to apply the default neutral style.\n'' (empty string)\nNo\n\n\nwidth\nstring / number\nThe width of the grid. Can be a pixel value (e.g., '500px') or a percentage (e.g., '100%'). Recommended for optimal display of the column. The width can be set to 'inherit' to match the width of the containing element.\n'90vw'\nNo\n\n\n\n\n🧱 Columns Configuration Example\nconst columns = [\n  {\n    name: 'username',\n    alias: 'User Name',\n    width: '200px',\n    enableSearch: true\n  },\n  {\n    name: 'status',\n    alias: 'Account Status',\n    hidden: false\n  }\n];\n\n\n🎛 Props in Action\npageSize + onPageChange\n<DataGrid\n  columns={columns}\n  data={largeDataset}\n  pageSize={10}\n  onPageChange={(e, newPage) => console.log(`Page changed to: ${newPage}`)}\n/>\n\n\nRow Interaction Events\n<DataGrid\n  columns={columns}\n  data={data}\n  onRowClick={(e, row) => alert(`You clicked on ${row.name}`)}\n  onRowHover={(e, row) => console.log('Hovered:', row.id)}\n  onRowOut={() => console.log('Mouse left row')}\n/>\n\n\nGlobal Search & Sort Events\n<DataGrid\n  columns={columns}\n  data={data}\n  options={ enableGlobalSearch: true }\n  onSearchComplete={(e, query, columns, result, matchCount) => console.log('Search Results:', result)}\n  onSortComplete={(e, sortColumns, sortedData, sortOrder) => console.log('Sorted Data:', sortedData)}\n/>\n\n\nCustom Grid Dimensions\n<DataGrid\n  columns={columns}\n  data={data}\n  width=\"100%\"\n  height=\"400px\"\n  maxWidth=\"1200px\"\n  maxHeight=\"80vh\"\n/>\n\n\nResizable Columns (v1.1.0+)\n<DataGrid\n  columns={columns}\n  data={data}\n  onColumnResized={(e, newWidth, columnName) =>\n    console.log(`${columnName} resized to ${newWidth}px`)\n  }\n/>\n\n\n🎨 Themes\nAvailable themes:\n\n'blue-core'\n'dark-stack'\n'medi-glow'\n'' (default/neutral)\n\nExample:\n<DataGrid\n  columns={columns}\n  data={data}\n  theme=\"blue-core\"\n/>\n\n\n📌 Version-Specific Features\n\n\n\nFeature\nAvailable Since\n\n\n\n\nid prop auto-gen\nv1.0.5\n\n\nonColumnResized\nv1.1.0\n\n\ntheme prop\nv1.1.1\n\n\ncurrentPage prop\nv1.1.2"
  },
  {
    "title": "📊 Columns",
    "url": "api-columns.html",
    "content": "The columns prop defines the layout and behavior of each column in the DataGrid. It is an array of column objects, where each object represents a column's configuration.\n\n\n\nField\nType\nDescription\nDefault Value\nRequired\n\n\n\n\nalias\nstring\nProvides an alternative name or alias for the column key. This alias can be used in column headers and other UI elements to make the grid more intuitive.\n-\nNo\n\n\ncellStyle\nobject\nApplies custom styles to the <td> cell. Useful for matching headerStyle-defined widths or aligning text consistently. Use with caution: this affects only row cells. Setting layout-affecting properties (e.g. width) differently from headers may cause misalignment. Supported in version 1.1.10 and above.\n-\nNo\n\n\nclass\nstring\nCustom CSS class applied to each data cell in the column.\n-\nNo\n\n\nconcatColumns\nobject\nSpecifies columns to concatenate into this column. It includes: columns (array of column keys to concatenate) and separator (the separator string).\n-\nNo\n\n\ndraggable\nboolean\nEnables or disables dragging for an individual column. Overrides the global enableColumnDrag setting. Fixed columns can be reordered among themselves, and non-fixed columns among their own group.\n-\nNo\n\n\neditable\nboolean\nEnables or disables cell editing for a specific column. Overrides the enableCellEdit setting. Cell editing is fully accessible via keyboard, touch, and mouse. A <td> cell enters edit mode when double-clicked with a mouse, by pressing Enter on the keyboard, or with a firm tap on mobile devices. To save changes, press Enter on the keyboard, click outside the cell (mouse), or tap outside (touch). Press Esc to cancel. When a change is saved, the onCellUpdate callback is fired.\n-\nNo\n\n\neditor\nstring / object / Array\nEnables inline editing for the column. Can be a shorthand string ('text', 'number') or an object ('select') with detailed configuration. When used with concatColumns, this can be an array matching the column parts.💡 Default behavior: If editor is not provided but editable: true is set (or enableCellEdit is enabled globally), the field defaults to a 'text' input editor.\n'text' (if editable is true)\nNo\n\n\nenableSearch\nboolean\nEnables or disables the search textbox for a specific column. Overrides the enableColumnSearch setting.\n-\nNo\n\n\nfixed\nboolean\nSpecifies whether the column should be fixed. When enabled, the column will remain aligned to the left side of the grid based on its position in the column configuration.\nfalse\nNo\n\n\nformatting\nobject\nFormatting settings for the column. Includes the type (e.g., currency, date) and format (the format string, such as $0,0.00).\n-\nNo\n\n\nheaderStyle\nobject\nApplies custom styles to the <th> (header) cell. Useful for matching cellStyle-defined widths or aligning text consistently. Supported in version 1.1.10 and above.\n-\nNo\n\n\nhidden\nboolean\nWhether the column should be hidden.\nfalse\nNo\n\n\nname\nstring\nThe display name of the column header. It also serves as the key or identifier for accessing the corresponding data in each row. This value must be unique.\n-\nYes\n\n\norder\nnumber\nSpecifies the display order of the column (integer value), starting from 1.\n-\nNo\n\n\nrender\nfunction(formattedRow, baseRow) => React.ReactNode\nCustom render function for the column. Receives formattedRow (the transformed row data after formatting and concatenation) and baseRow (the original, unformatted row data). Should return a React node to be rendered in the cell.\n-\nNo\n\n\nresizable\nboolean\nEnables or disables resizing for a specific column. This setting overrides the enableColumnResize option.\n-\nNo\n\n\nsearchPlaceholder\nstring\nSets the placeholder text for individual column search input fields. Useful for customization or localization.\n\"Search column…\"\nNo\n\n\nsortable\nboolean\nEnables or disables sorting for an individual column. Overrides the global enableSorting setting. Supported in version 1.2.2 and above.\n-\nNo\n\n\nwidth\nnumber / string\nThe width of the column. Can be a fixed pixel value (e.g., 100px) or a percentage (e.g., '20%'). Default value is calculated dynamically.\n-\nNo\n\n\n\nExample of columns Array:\nconst columns = [\n  {\n    name: 'ID',\n    formatting: { type: 'number', format: '0,0' },\n    cellStyle: { textAlign: 'center', width: '70px' },\n    headerStyle: { width: '70px' }\n  },\n  {\n    name: 'Name',\n    alias: 'Full Name',\n    width: '30%',\n  },\n  {\n    name: 'DOB',\n    alias: 'Birth Date',\n    formatting: { type: 'Date', format: 'dd MMM yyyy'}\n  },\n  {\n    name: 'status',\n    alias: 'Status',\n    render: (formattedRow, baseRow) => \n            <span className={`status-${formattedRow.status}`}>{formattedRow.status}</span>\n  },\n  {\n    name: 'row-identifier',\n    hidden: true\n  }\n];\n\n\n🔍 Render Function Signature\nrender: (formattedRow: object, baseRow: object) => React.ReactNode\n\n\n\n\nParameter\nType\nDescription\n\n\n\n\nformattedRow\nobject\nthe transformed row data after formatting and concatenation\n\n\nbaseRow\nobject\nthe original, unformatted row data\n\n\n\n\nUse Case Examples for Render Function\n✅ Custom Cell Rendering\nconst columns = [\n  {\n    name: 'name',\n    alias: 'Full Name',\n    render: (row) => <strong>{row.name}</strong>\n  },\n  {\n    name: 'email',\n    alias: 'Email',\n    render: (formattedRow) => (\n        <a href={`mailto:${formattedRow.email}`} style={{ color: blue }}>\n                {formattedRow.email}\n        </a>\n    )\n  },\n  {\n    name: 'status',\n    alias: 'Active',\n\tformatting: { type: 'boolean' },\n    render: (formattedRow, baseRow) => (\n      <span\n      style={{\n          padding: '4px 8px',\n          borderRadius: '12px',\n          backgroundColor: baseRow.status === 'true' ? `#d4edda` : `#f8d7da`,\n          color: baseRow.status === 'true' ? `#155724` : `#721c24`\n        }}        \n      >\n        {formattedRow.status}\n      </span>\n    )\n  }\n];\n\nconst data = [\n  { name: 'Alice Johnson', email: 'alice@example.com', status: 'true' },\n  { name: 'Bob Smith', email: 'bob@example.com', status: 'false' }\n];\n\nconst App = () => (\n  <DataGrid\n    columns={columns}\n    data={data}\n    pageSize={10}\n  />\n);\n\n✅ Add Action Buttons in Column Cells\n{\n  name: 'actions',\n  alias: 'Actions',\n  render: (row) => (\n    <button onClick={() => alert(`Edit ${row.name}`)}>Edit</button>\n  )\n}\n\n\nEditor Shorthand Values\n\n\n\nValue\nDescription\n\n\n\n\n'text'\nBasic text input (default)\n\n\n'number'\nNumeric input\n\n\n\nFull Editor Object Format\n\n\n\nProperty\nType\nDescription\n\n\n\n\ntype\n'text' | 'number' | 'select'\nInput type\n\n\nvalues\nArray<string> | Array<{ label: string, value: any }>\nRequired for 'select' type\n\n\n\n✅ Example: Simple Column with a Select Editor\n{\n  name: 'Role',\n  editable: true,\n  editor: {\n    type: 'select',\n    values: [\n      { label: 'Admin', value: 'admin' },\n      { label: 'Editor', value: 'editor' },\n      { label: 'Viewer', value: 'viewer' }\n    ]\n  }\n}\n\n📝 Alternate (shorthand) version\n{\n  name: 'firstName',\n  editable: true,\n  editor: 'text'\n}\n\nUsage with concatColumns\n\n\n\nField\nType\nDescription\n\n\n\n\neditor\nArray<string | object>\nShould match the order and count of fields in the columns array of concatColumns. Each item can be a string shorthand or full config.\n\n\n\nExample:\n{\n  alias: 'Department-Title',\n  name: 'Department',\n  editable: true,\n  concatColumns: {\n    columns: ['Department', 'Title'],\n    separator: ' - ',\n    editor: [\n      {\n        type: 'select',\n        values: [\n          { label: 'Engineering', value: 'engineering' },\n          { label: 'Marketing', value: 'marketing' },\n          { label: 'HR', value: 'hr' }\n        ]\n      },\n      {\n        type: 'select',\n        values: [\n          { label: 'Manager', value: 'manager' },\n          { label: 'Lead', value: 'lead' },\n          { label: 'Intern', value: 'intern' }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "title": "⚙️ Options",
    "url": "api-options.html",
    "content": "The options prop is an object that provides additional configuration settings to further customize the behavior of the DataGrid component. These settings control various aspects of the grid, such as styling, button visibility, search options, and download functionality. The options object can also be defined as a global configuration object and reused across multiple grids with little or no modification. This approach helps keep the code clean and uncluttered, promotes consistency, and supports better separation of concerns by centralizing grid-related settings.\n\n\n\n\nField\nType\nDescription\nDefault Value\nRequired\n\n\n\n\nactionColumnAlign\nstring ('left' | 'right' | '')\nControls alignment of the Actions column. Set to 'left' or 'right' to fix its position. Leave empty to allow the column to scroll with the rest of the table.\n'right'\nNo\n\n\naiSearch\nobject\nConfiguration object to enable AI search functionality in the data grid. Supported in version 1.2.0 and above. For more details, refer to the AI Search document.\n-\nNo\n\n\ndebug\nboolean\nEnables debug logging for development. When set to true, the grid will output console error, warn, and info logs — useful for debugging features like AI search. Should be disabled in production to avoid unnecessary console output. Available in version 1.2.1 and above.\nfalse\nNo\n\n\ndeleteButton\nobject\nConfiguration for enabling a delete button on each row. Includes an event field which is the function triggered when the button is clicked.\n-\nNo\n\n\ndownloadFilename\nstring\nThe filename used when downloading grid data in CSV format. The default value is 'export-{yyyy-MM-dd HH:mm:ss}'\n-\nNo\n\n\neditButton\nobject\nConfiguration for enabling an edit button on each row. Includes an event field which is the function triggered when the button is clicked.\n-\nNo\n\n\nenableCellEdit\nboolean\nEnables cell editing for all columns. Column-level editable settings override this option. Cell editing is fully accessible via keyboard, touch, and mouse. A <td> cell enters edit mode when double-clicked with a mouse, by pressing Enter on the keyboard, or with a firm tap on mobile devices. To save changes, press Enter on the keyboard, click outside the cell (mouse), or tap outside (touch). Press Esc to cancel. When a change is saved, the onCellUpdate callback is fired.\nfalse\nNo\n\n\nenableColumnDrag\nboolean\nEnables column dragging for all columns. Column-level draggable settings override this option. Fixed columns can be reordered among themselves, and non-fixed columns among their own group.\nfalse\nNo\n\n\nenableColumnResize\nboolean\nEnables column resizing across all columns. Column-level resizable settings override this option.\nfalse\nNo\n\n\nenableColumnSearch\nboolean\nWhether to enable column-wise search functionality (search per individual column). Column-level search settings override this option.\ntrue\nNo\n\n\nenableDownload\nboolean\nWhether to enable the download functionality (export data as CSV).\ntrue\nNo\n\n\nenableGlobalSearch\nboolean\nEnables global search across all columns.\ntrue\nNo\n\n\nenableRowSelection\nboolean\nEnables the row selection column. Available in version 1.2.2 and above.\ntrue\nNo\n\n\nenableSorting\nboolean\nEnables sorting for all columns by default. Can be overridden by individual column-level sortable settings. Supported in version 1.2.2 and above.\ntrue\nNo\n\n\nglobalSearchPlaceholder\nstring\nSets the placeholder text for the global search input field in the toolbar. Useful for localization or customization.\n\"Search all columns…\"\nNo\n\n\ngridBgColor\nstring\nSets a custom background color for the grid container. Supported in version 1.1.11 and above.\n-\nNo\n\n\ngridClass\nstring\nCustom CSS class for the grid container.\n-\nNo\n\n\nheaderBgColor\nstring\nSets a custom background color for the header row. Supported in version 1.1.11 and above.\n-\nNo\n\n\nheaderClass\nstring\nCustom CSS class for the header row.\n-\nNo\n\n\nonDownloadComplete\nfunction\nCallback function that enables post-download handling such as logging, notifications, or emailing downloaded files.\n-\nNo\n\n\nrowClass\nstring\nCustom CSS class for each row in the grid.\n-\nNo\n\n\nrowHeight\nstring / number\nSets the height of each data row. Accepts a pixel value (e.g., '200px') or a percentage of the table body height (e.g., '25%').\n-\nNo\n\n\nrowSelectColumnAlign\nstring ('left' | 'right' | '')\nControls the alignment of the selection column. Set to 'left' or 'right' to fix its position. Leave empty ('') to allow the column to scroll with the rest of the table. Available in version 1.2.2 and above.\n'left'\nNo\n\n\nshowFooter\nboolean\nControls the visibility of the grid footer, which includes summary rows and pagination.\ntrue\nNo\n\n\nshowNumberPagination\nboolean\nControls visibility of number-based pagination in the grid footer. Supported from version 1.2.1.\ntrue\nNo\n\n\nshowPageInfo\nboolean\nControls visibility of page information (e.g. \"1–10 of 50\") in the grid footer. Supported from version 1.2.1.\ntrue\nNo\n\n\nshowPageSizeSelector\nboolean\nControls visibility of the page size selector (\"Rows per page\") in the grid footer. Supported from version 1.2.1.\ntrue\nNo\n\n\nshowResetButton\nboolean\nControls the visibility of a reset button in the toolbar, allowing users to clear all filters and search.\ntrue\nNo\n\n\nshowSelectPagination\nboolean\nControls visibility of the page selection dropdown in the grid footer. Supported from version 1.2.1.\ntrue\nNo\n\n\nshowToolbar\nboolean\nControls the visibility of the react data grid lite toolbar, which includes actions like search and reset.\ntrue\nNo\n\n\n\n\nExample of options Object:\nconst options = {\n  gridClass: 'custom-grid-class',\n  headerClass: 'custom-header-class',\n  rowClass: 'custom-row-class',\n  enableColumnSearch: false,\n  enableGlobalSearch: true,\n  globalSearchPlaceholder:'try search...',\n  showResetButton: false,\n  enableCellEdit: true,\n  rowHeight: '100px',\n  enableColumnDrag: true,\n  enableColumnResize: true,\n  actionColumnAlign:'right',\n  editButton: {\n    event: (e, row) => { console.log('Edit row:', row); }\n  },\n  deleteButton: {\n    event: (e, row) => { console.log('Delete row:', row); }\n  },\n  enableDownload: true,\n  downloadFilename: 'data-grid-export.csv'\n};"
  },
  {
    "title": "🤖 AI Search Integration",
    "url": "ai-search.html",
    "content": "The DataGrid component supports AI-powered search using OpenAI, OpenRouter, or your custom backend/logic.\nYou can enable this by configuring the options.aiSearch object passed into the DataGrid as props.\n🔧 Enabling AI Search\n<DataGrid\n  id=\"my-grid\"\n  data={myData}\n  columns={myColumns}\n  options={{\n    aiSearch: {\n      enabled: true,\n      apiKey: 'your-api-key', // Optional if using custom endpoint or logic\n      model: 'openai/gpt-4' // or 'openai/gpt-3.5-turbo' — default is 'gpt-4'\n      endpoint: 'https://openrouter.ai/api/v1/chat/completions', // Optional, only needed if not using OpenAI\n      headers: {\n        'HTTP-Referer': 'https://yourdomain.com', // Required for OpenRouter\n        'X-Title': 'My AI Grid'\n      },\n      systemPrompt: 'You are a helpful assistant.',\n      minRowCount: 50, // Minimum number of rows to trigger AI search\n    }\n  }}\n/>\n\n\n🧠 Default AI Behavior\nThe DataGrid uses the following default system prompt for AI queries:\nYou are a filtering assistant. Given a list of JSON rows, return only the rows matching the query. Only return a JSON array of matched rows.\n\n🛠 Customizing the Prompt\nYou can override it using:\naiSearch: {\n  systemPrompt: 'You are a helpful assistant that...'\n}\n\n⚠️ You must still ensure the AI output is a pure JSON array of rows, otherwise it will be rejected.\n\n🚀 How It Works\nWhen global search is used:\n\n\nIf aiSearch.enabled is true, and:\n\n\nthe search is global,\n\n\n\nthe dataset exceeds minRowCount,\n\n\nand a query is entered,\n\n\n\n\n→ The DataGrid will attempt to use the configured AI service to find matching rows from your data.\nIf AI search fails (e.g., invalid key, timeout), the DataGrid automatically falls back to local search.\n\n✅ AI Search Modes\nThere are 3 different modes you can configure based on your needs:\n\n1. OpenAI / OpenRouter (Standard API Key)\nUse when:\n\nYou have an API key from OpenAI or OpenRouter.\nThis integration method requires passing your API key directly to the frontend.\nFor security reasons, it is strongly recommended to use this approach only in internal, private, or trusted network environments where API keys cannot be exposed publicly.\n\nFor public or production applications, consider setting up a backend proxy or serverless function to securely handle API calls.\nExample:\naiSearch: {\n  enabled: true,\n  apiKey: 'sk-xxxxxx',\n  model: 'gpt-4',\n  endpoint: 'https://openrouter.ai/api/v1/chat/completions',\n  headers: {\n    'HTTP-Referer': 'https://yourdomain.com',\n    'X-Title': 'Grid AI Search'\n  },\n  systemPrompt: 'You are an AI assistant that filters data.',\n  minRowCount: 100\n}\n\n\n🔒 Note for OpenRouter: HTTP-Referer header is required for browser-based clients.\n\n\n2. Custom Backend Endpoint (No API Key)\nUse when:\n\nYou want to process the AI logic server-side (e.g., with rate-limiting, prompt tuning, caching, etc.).\nNo API key is provided.\n\nExample:\naiSearch: {\n  enabled: true,\n  endpoint: 'https://my-backend.com/api/ai-search',\n  headers: {\n    Authorization: 'Bearer my-secret-token'\n  },\n  minRowCount: 100\n}\n\nExpected API Contract:\nYour endpoint must accept:\n{\n  \"query\": \"Search string\",\n  \"data\": [ ...your full grid data... ]\n}\n\nAnd return:\n[ { /* matching row 1 */ }, { /* matching row 2 */ } ]\n\n\n3. Custom AI Search Function\nUse when:\n\nYou want full control over AI logic (e.g., vector search, chaining, RAG).\n\nExample:\naiSearch: {\n  enabled: true,\n  runAISearch: async ({ query, data }) => {\n    const results = await myCustomAISearch(query, data);\n    return results; // Must return a JSON array of matching rows\n  },\n  minRowCount: 100\n}\n\n\nThis bypasses the built-in useAISearch logic entirely and uses your own function.\n\n\n🔍 Local vs AI Search in React DataGrid Lite\n\n\n\nFeature\nLocal Search\nAI Search\n\n\n\n\nColumn-specific search input\n✅\n❌ (Only global search in toolbar)\n\n\nGlobal natural language query\n❌\n✅\n\n\nFuzzy matching\n❌\n✅ (Handled by AI model)\n\n\nMulti-column filtering\n✅\n✅ (If described clearly in the query)\n\n\nCustom search logic\n❌\n✅ (via runAISearch or custom function)\n\n\n\n\n🛠 Available aiSearch Options\n\n\n\nOption\nType\nDescription\n\n\n\n\nenabled\nboolean\nEnable/disable AI search\n\n\napiKey\nstring\nAPI key for OpenAI/OpenRouter\n\n\nmodel\nstring\nModel ID (e.g., gpt-4)\n\n\nendpoint\nstring\nAPI endpoint (optional)\n\n\nheaders\nobject\nCustom headers (e.g., OpenRouter headers)\n\n\nsystemPrompt\nstring\n(Optional) Custom AI system prompt\n\n\nminRowCount\nnumber\nMin rows before using AI (default: 1)\n\n\nrunAISearch\nfunction\nCustom AI search function (overrides built-in logic)\n\n\n\n\n🧪 Example Use Case\nYou want to enable AI search only when there are 100+ rows and fallback to local otherwise:\naiSearch: {\n  enabled: true,\n  apiKey: 'sk-...',\n  model: 'gpt-3.5-turbo',\n  minRowCount: 100\n}\n\n🧪 Example with OpenRouter\naiSearch: {\n  enabled: true,\n  apiKey: 'your-openrouter-api-key',\n  endpoint: 'https://openrouter.ai/api/v1/chat/completions',\n  model: 'mistral/mixtral-8x7b',\n  headers: {\n    'HTTP-Referer': 'https://mygrid.com',\n    'X-Title': 'My Grid AI'\n  },\n  minRowCount: 50\n}\n\n\n🛠 Troubleshooting\n\n\n\nIssue\nSolution\n\n\n\n\nNo API key provided\nUse endpoint or runAISearch, or supply a valid apiKey.\n\n\nAI response not valid JSON\nEnsure your prompt tells the AI to return only a JSON array.\n\n\n403 from OpenRouter\nAdd HTTP-Referer and X-Title headers in headers.\n\n\nEmpty results from AI\nTest prompt and input manually; possibly refine systemPrompt.\n\n\nNot seeing AI logs\nSet the debug prop to true to enable console logs for AI-related errors, warnings, and parsing issues. Useful for debugging during development."
  },
  {
    "title": "📦 Imperative Grid API (`ref` methods)",
    "url": "datagrid-ref-methods.html",
    "content": "The DataGrid component exposes a set of imperative methods through a ref using React’s useImperativeHandle hook. This allows parent or consuming components to programmatically interact with and control the grid beyond the declarative prop-based API.\nBy using these methods, you can perform actions such as retrieving filtered or selected rows, resetting the grid, or getting the current page — all from outside the DataGrid component itself.\nHow to Use\nTo access these methods, create a React ref and attach it to your <DataGrid /> component:\nimport { useRef } from 'react';\n\nconst gridRef = useRef();\n\n<DataGrid\n  ref={gridRef}\n  /* other props */\n />\n\nYou can then call any exposed method via gridRef.current after the grid mounts.\n🔍 Available Methods\ngetFilteredRows()\nReturns an array of rows currently displayed in the grid, reflecting any applied search, filter, or sorting criteria.\nconst filteredRows = gridRef.current.getFilteredRows();\n\ngetFilteredSelectedRows()\nReturns an array of rows that are both selected and currently visible in the filtered view.\nconst selectedFilteredRows = gridRef.current.getFilteredSelectedRows();\n\ngetAllSelectedRows()\nReturns an array of all selected rows, including those that might be filtered out or on other pages.\nconst allSelectedRows = gridRef.current.getAllSelectedRows();\n\ngetCurrentPage()\nReturns the current page number that the grid is displaying.\nconst currentPage = gridRef.current.getCurrentPage();\n\nresetGrid()\nResets the grid to its initial state by:\n\nClearing all selected rows\nResetting pagination to the first page\nClearing any applied filters and sorting\n\ngridRef.current.resetGrid();\n\nclearSelectedRows()\nClears the current selection of rows in the grid — without affecting filters, pagination, or sorting.\ngridRef.current.clearSelectedRows();\n\nWhy Use These Methods?\nThese imperative APIs are particularly useful when you need to:\n\nExport selected rows to a file\nSync grid state with other UI components\nImplement custom toolbar buttons that reset or modify grid state\nPerform bulk operations based on current selection or filters\n\nThey give you full control over the grid’s behavior from parent components, making your DataGrid implementation more flexible and powerful."
  },
  {
    "title": "🪄 Styling & Theming",
    "url": "styling.html",
    "content": "🎨 Theming Support\nThe grid provides several built-in visual themes to help match your application's branding and improve usability across different domains. These themes improve readability and help visually align the grid with the surrounding application UI.\nApply a theme by passing the theme prop to the grid component:\n<DataGrid theme=\"blue-core\" />\n\n\n🧱 What Themes Affect\nEach theme customizes the following UI aspects:\n\nHeader Background Color – applies to column headers\nGrid Body Background Color – applies to outer grid container\nText & Control Color – used in controls like the pagination, dropdown, etc.\n\n\n🎨 Available Themes\n\n\n\nTheme Name\nHeader Background\nBody Background\nText / Control Color\nDescription\n\n\n\n\nblue-core\n#1F3B4D\n#E5E8EC\n#1F3B4D\nProfessional and clean blue-gray theme, great for enterprise dashboards.\n\n\ndark-stack\n#2D2D2D\n#F5F5F5\n#2D2D2D\nModern grayscale palette ideal for minimal UI and clean layouts.\n\n\nmedi-glow\n#256D4F\n#E8F5E9\n#256D4F\nSoft green tone suitable for healthcare, wellness, and eco-focused UIs.\n\n\n(default)\n#667\n#E0E0E0\n#667\nNeutral base styling used when no theme is specified.\n\n\n\n\n📝 Notes\n\nThe theme prop accepts one of the predefined theme names.\nWhen no theme is passed, the default neutral styling is applied.\nThese themes adjust key colors via CSS with !important to maintain consistency across browsers.\nYou can extend or override styles using your own custom classes if needed.\n\n\n🎛️ Overriding Themes with Class Props\nYou can override or extend theme styling using the following optional props:\n\n\n\nProp Name\nType\nDescription\n\n\n\n\ngridClass\nstring\nApplies a custom class to the outer grid container.\n\n\nheaderClass\nstring\nOverrides header styling. Useful for setting your own background or text color.\n\n\nrowClass\nstring\nApplies custom styles to each data row. Can be used to add hover effects, borders, etc.\n\n\n\nThese props are especially useful if you want to:\n\nApply branding-specific colors or layout tweaks\nLayer custom styles on top of a base theme\nDisable or override theme values selectively\n\n\n⚙️ Custom CSS Classes for Grid\nThe react-data-grid-lite component allows you to apply custom CSS classes to various parts of the grid, such as the entire grid container, the header row, and each individual row. You can use the following props to add custom styles:\n\n\n\nProp Name\nType\nDescription\nRequired\n\n\n\n\ngridClass\nString\nCustom CSS class for the grid container.\nNo\n\n\nheaderClass\nString\nCustom CSS class for the header row.\nNo\n\n\nrowClass\nString\nCustom CSS class for each row in the grid.\nNo\n\n\nclass\nString\nCustom CSS class for each data cell in the column.\nNo\n\n\n\n📝 Example:\n\nHere’s how you can use these props to add custom styles:\n<DataGrid\n  options={\n    gridClass: \"my-custom-grid\",\n    headerClass: \"my-custom-header\",\n    rowClass: \"my-custom-row\"\n  }\n  columns={columns}\n  data={data}\n/>\n\nIn this example, my-custom-grid, my-custom-header, and my-custom-row would be the CSS classes you define in your stylesheet.\n/*Custom Styles*/\n.my-custom-grid {\n    background-color: #c0cad3 !important;\n    border: 3px solid #c0cad3 !important;\n    box-shadow: 0 0 0 3px #c0cad3 !important;\n}\n\n.my-custom-header {\n    background-color: #667 !important;\n    color: #ffffff !important;\n}\n\n.my-custom-row:nth-child(even) {\n    background-color: #e7e0e4 !important;\n}\n\n.my-custom-row:nth-child(odd) {\n    background-color: #f3f4f9 !important;\n}\n\n.my-custom-row {\n    border-bottom: 1px solid #4f4d4d !important;\n}\n\n    .my-custom-row:hover {\n        background-color: #e0e0e0 !important;\n    }\n\n🔄 Additional Notes:\n\nEnsure that the custom styles don’t conflict with the default styles of the grid to maintain proper layout and functionality.\n\nWhile the gridClass, headerClass, and rowClass props allow you to apply custom CSS classes to the grid and its elements, the styles might not be perfectly aligned with your desired layout or design out-of-the-box. Depending on your project’s design system or CSS framework, you may need to adjust or override these styles to ensure they work as intended."
  },
  {
    "title": "🔤 Format Guide",
    "url": "format-guide.html",
    "content": "This guide explains how to use the formatting option in column definitions to customize how values are displayed in the grid.\n\n✅ How to Use\nUse the formatting key inside each column to define how values should appear:\nconst columns = [\n  {\n    name: 'Amount',\n    formatting: { type: 'number', format: '0,0.00' }, // → \"1,234.56\"\n  },\n  {\n    name: 'Salary',\n    formatting: { type: 'currency', format: 'USD' }, // → \"$5,000.00\"\n  },\n  {\n    name: 'Joining Date',\n    formatting: { type: 'date', format: 'MMMM dd, yyyy' }, // → \"January 01, 2024\"\n  },\n  {\n    name: 'Active',\n    formatting: { type: 'boolean' }, // → \"Yes\" / \"No\"\n  }\n];\n\nThe grid automatically formats values based on type and format.\n\n✅ Supported Types\n\n\n\nType\nDescription\nExample Format\nNotes\n\n\n\n\nnumber\nFormats numeric values\n'0,0', '0.00'\nAdds commas and/or decimals\n\n\ncurrency\nLocalized currency formatting\n'USD', 'INR'\nRequires valid ISO 4217 code\n\n\ndate\nFormats date strings\n'MM/dd/yyyy'\nDelegates to internal formatDate\n\n\npercent\nFormats decimals as percentages\n–\nMultiplies value by 100\n\n\nboolean\nFormats true/false as Yes / No\n–\nCase-insensitive\n\n\n\n\n📌 Common Format Tokens (for dates)\n\n\n\nToken\nMeaning\nExample\n\n\n\n\nyyyy\n4-digit year\n2023\n\n\nMM\n2-digit month\n01\n\n\nMMM\nAbbreviated month\nJan\n\n\nMMMM\nFull month name\nJanuary\n\n\ndd\n2-digit day of month\n02\n\n\ndo\nOrdinal day\n2nd\n\n\nHH\n24-hour format\n15\n\n\nhh\n12-hour format\n03\n\n\nmm\nMinutes\n04\n\n\nss\nSeconds\n00\n\n\nS\nMilliseconds\n0\n\n\na\nAM/PM\nPM\n\n\nEEE\nAbbreviated weekday\nMon\n\n\nEEEE\nFull weekday name\nMonday\n\n\nZ\nTimezone offset\n+0000\n\n\nZZZZ\nTimezone full name\nEastern Standard Time"
  },
  {
    "title": "🔁 Event Callbacks",
    "url": "events.html",
    "content": "onSortComplete(e, sortColumns, sortedData, sortOrder)\nTriggered after sorting completes.\n\ne (React.SyntheticEvent) : Event object\nsortColumns: Array of sorted column keys\nsortedData: The sorted data array\nsortOrder: 'asc' or 'desc'\n\nonSearchComplete(e, query, columns, result, matchCount)\nFired after search operation finishes.\n\ne (React.SyntheticEvent) : Event object\nquery: Search string\ncolumns: Columns searched\nresult: Filtered rows\nmatchCount: Number of matches\n\nonPageChange(e, currentPage, previousPage, currentPageRows, currentPageFirstRow)\nFired when pagination changes.\n\ne (React.SyntheticEvent) : Event object\ncurrentPage: Current active page number\npreviousPage: Previous active page number\ncurrentPageRows: Number of rows on current page\ncurrentPageFirstRow: Index of first row on current page\n\nonDownloadComplete(e, filename, blob)\nTriggered after CSV file download. Useful for logging or triggering post-download workflows.\n\ne (React.SyntheticEvent) : Event object\nfilename: Name of the downloaded file\nblob: Blob object of the file\n\nonColumnResized(e, newWidth, columnName)\nThis event handler is called after a column has been resized. This function allows you to respond to column resize events, such as updating UI elements or saving user preferences.\n\ne (React.SyntheticEvent) : The original event object from the resize action.\nnewWidth : The new width of the column in pixels as a string with px suffix (e.g., \"150px\"). If the new width is null or invalid, it defaults to 0.\ncolumnName : The unique identifier (name) of the resized column.\ngridID : The unique identifier (id) for the DataGrid component.\n\nonColumnDragEnd(columnName, newColumnOrder)\nThis callback is triggered when a column is dropped after a drag. It provides:\n\ncolumnName: The unique identifier (name) of the column that was dragged.\nnewColumnOrder: an array of rendered column objects, each containing:\n\nname: unique identifier for the column\norder: the new position (starting from 1)\nalias (optional): user-friendly name or alternative label\n\n\n\nonSelectAll(event, selectedRows, isSelected) — Supported in v1.2.2 and above\nCallback function triggered when the selection column header is clicked to select or deselect all rows on the current page.\n\nevent (React.SyntheticEvent) : The event object triggered by the user interaction.\nselectedRows (RowData[]) : An array of data objects representing the currently selected (or deselected) rows.\nisSelected (boolean) : Indicates whether rows are now selected (true) or deselected (false).\n\n\nRow-Level Action Events\nonRowSelect(event, row, isSelected) — Supported in v1.2.2 and above\nCallback function triggered when a single row is selected or deselected via the selection column.\n\nevent (React.SyntheticEvent) : The event object triggered by the user interaction.\nrow (RowData) : The data object for the selected or deselected row.\nisSelected (boolean) : Indicates whether the row is now selected (true) or deselected (false).\n\neditButtonEvent(e, row)\nTriggered when the Edit button in a row is clicked. Use this to open edit forms or modals tied to specific row data.\n\ne (React.SyntheticEvent) : Click event object\nrow: Data object representing the clicked row\n\ndeleteButtonEvent(e, row)\nFired when the Delete button in a row is clicked. Typically used to confirm and process row deletions.\n\ne (React.SyntheticEvent) : Click event\nrow: The row data being deleted\n\nonRowClick(e, row)\nCalled when any part of a row (not a specific button) is clicked. Useful for row-level selection, navigation, or detailed views.\n\ne (React.SyntheticEvent) : Click event\nrow: The full row data\n\nonRowHover(e, row)\nTriggered when the mouse hovers over a row. Ideal for showing tooltips, highlights, or preview actions.\n\ne (React.SyntheticEvent) : Mouse event\nrow: Row under the cursor\n\nonRowOut(e, row)\nFired when the mouse leaves a row area. Often used to reset styles or hide tooltips.\n\ne (React.SyntheticEvent) : Mouse event\nrow: Row from which the cursor exited\n\nonCellUpdate(cellUpdate)\nFired when cell editing is saved (e.g., by pressing Enter). Useful for persisting changes, triggering validations, or syncing with a backend.\n\ncellUpdate: An object containing details about the updated row and columns.\n\ncellUpdate structure:\n\n\nrowIndex: (number) — Index of the updated row\n\n\neditedColumns: (Array<{ colName: string, value: any }>) —\nA list of updated columns and their new values.\n\n💡 Normally contains a single column update, but for concatenated columns, it may include multiple fields with their respective values.\n\n\n\nupdatedRow: (object) — The full row data after changes\n\n\nExample usage:\nonCellUpdate={(cellUpdate) => {\n  console.log('Row index:' + cellUpdate.rowIndex);\n  console.log(cellUpdate.editedColumns);\n  console.log(cellUpdate.updatedRow);\n}}\n\nExample: cellUpdate object\nNormal (single column) update:\n{\n  rowIndex: 2,\n  editedColumns: [\n    { colName: 'lastName', value: 'Doe' }\n  ],\n  updatedRow: {\n    id: 3,\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 30\n  }\n}\n\nConcatenated column update:\n{\n  rowIndex: 4,\n  editedColumns: [\n    { colName: 'firstName', value: 'Jane' },\n    { colName: 'lastName', value: 'Smith' }\n  ],\n  updatedRow: {\n    id: 5,\n    firstName: 'Jane',\n    lastName: 'Smith',\n    age: 27\n  }\n}"
  },
  {
    "title": "↔️ Pinned & Resizable Columns",
    "url": "example-3.html",
    "content": "This example showcases the react-data-grid-lite component with pinned columns, resizable columns, and column search disabled.\n\nIt builds on dynamic column mapping and highlights how to fix important columns (like ID and Title) to the left for usability.\n\n\n✅ Key Features\n\nPinned Columns: ID and Title stay visible during horizontal scroll.\nColumn Resize: Columns can be resized using drag handles.\nColumn Search Disabled: All column-specific search fields are hidden.\nDate Formatting: Applies dd-MMM-yyyy format to the published field.\nHidden Columns: description is excluded from display.\nDark Theme: Uses the dark-stack theme.\n\n\n🧩 Grid Component Code\nimport React from 'react';\nimport DataGrid from 'react-data-grid-lite';\nimport { useFetch } from '../data';\n\nconst options = {\n  enableColumnSearch: false,\n  enableColumnResize: true,\n  actionColumnAlign: 'right',\n  editButton: { event: (e, row) => { alert('Edit Button clicked!'); console.log(row); }}\n};\n\nexport default function Grid() {\n  const users = useFetch();\n  const columns = users?.length > 0 ? Object.keys(users[0]).map((val) => {\n    if (val.toLowerCase() === 'id')\n      return { name: val, alias: 'ID', width: '100px', fixed: true };\n    else if (val.toLowerCase() === 'title')\n      return { name: val, fixed: true, width: '180px' };\n    else if (val.toLowerCase() === 'description')\n      return { name: val, hidden: true };\n    else if (val.toLowerCase() === 'published')\n      return { formatting: { type: 'Date', format: 'dd-MMM-yyyy' }, name: val };\n    else return { name: val, width: '250px' };\n  }) : [];\n\n  return (\n      <DataGrid columns={columns} data={users} pageSize={10} options={options} \n        width=\"70vw\" height=\"35vh\" theme=\"dark-stack\"\n      />\n  );\n}\n\n\n📡 Data Fetching: useFetch() Hook\nimport { useEffect, useState } from 'react';\nimport { trackPromise } from 'react-data-grid-lite';\n\nexport const useFetch = (api = 'books') => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const promise = fetch(`https://fakerapi.it/api/v2/${api}?_quantity=100`)\n      .then(response => response.json())\n      .then(response => { setData(response.data); });\n\n    trackPromise(promise);\n  }, []);\n\n  return data;\n};"
  },
  {
    "title": "📡 Consuming Remote API",
    "url": "example-1.html",
    "content": "This example shows how to fetch and display data from a remote API using react-data-grid-lite. It demonstrates how to:\n\nDynamically build column definitions from API response keys.\nTransform and format certain columns.\nExclude or hide unnecessary fields.\nRender the data in a performant, paginated grid.\n\n🔗 API Used\nfakerapi.it – Returns fake user data for testing:\nGET https://fakerapi.it/api/v1/users?_quantity=100\n\n🧩 Dynamic Column Mapping\nColumn definitions are generated by inspecting API response keys and applying logic to:\n\nRename columns (e.g. firstname → Name)\nHide redundant columns\n\nThis approach is flexible and adapts to schema changes without hardcoding each field.\n🚀 Code\nimport React, { useEffect, useState } from 'react';\nimport DataGrid, { trackPromise } from 'react-data-grid-lite';\n\nfunction App() {\n    const [users, setUsers] = useState([]);\n    const [userColumns, setUserColumns] = useState({});\n    useEffect(() => {\n        const promise = fetch('https://fakerapi.it/api/v1/users?_quantity=1000')\n            .then(response => response.json())\n            .then(data => {\n                const Columns = Object.keys(data.data[0])\n                setUserColumns(Columns.map((val) => {\n                    if (val.toLowerCase() === 'id')\n                        return { name: val, alias: 'ID', width: '100px' }\n                    else if (val.toLowerCase() === 'uuid')\n                        return { name: val, alias: 'UUID' }\n                    else if (val.toLowerCase() === 'firstname')\n                        return { name: val, alias: 'Name' }\n                    else return { name: val, hidden: true }\n                }));\n                setUsers(data.data);\n            }).catch(error => { console.error('Error fetching data:', error); });\n        trackPromise(promise);\n    }, []);\n\n    return (\n       <DataGrid columns={userColumns} data={users} pageSize={20} width={\"1200px\"} />\n    )\n}\n\nexport default App"
  },
  {
    "title": "📝 Global & Column Search",
    "url": "example-2.html",
    "content": "This example demonstrates a basic setup of the react-data-grid-lite component with the following features:\n\nGlobal and column-specific search\nRow action buttons (Edit & Delete) with event handlers\nColumn formatting (e.g. date formatting)\nResponsive grid size\n\n\nThe data is fetched from a public API using a custom React hook.\n\n\n✅ Key Features\n\nAction Column: Edit and Delete buttons are aligned to the left side of the grid for better layout control.\nDate Formatting: The published field is formatted using dd-MMMM-yyyy.\nTheming: Uses blue-core theme.\n\n\n🧩 Grid Component Example\nimport React from 'react';\nimport DataGrid from 'react-data-grid-lite';\nimport { useFetch } from '../data';\n\nconst options = {\n  enableColumnSearch: true,\n  actionColumnAlign: 'left',\n  editButton: { event: (e, row) => { alert('Edit Button clicked!'); console.log(row); }},\n  deleteButton: { event: (e, row) => { alert('Delete Button clicked!'); console.log(row); }}\n};\n\nexport default function Grid() {\n  const users = useFetch();\n  const columns = users?.length > 0\n    ? Object.keys(users[0])?.map((val) => {\n        if (val.toLowerCase() === 'id')\n          return { name: val, alias: 'ID', width: '100px' };\n        else if (val.toLowerCase() === 'description')\n          return { name: val, hidden: true };\n        else if (val.toLowerCase() === 'published')\n          return { name: val, formatting: { type: 'Date', format: 'dd-MMMM-yyyy' },\n            width: '200px'\n          };\n        else if (val.toLowerCase() === 'genre')\n          return { name: val, width: '150px' };\n        else\n          return { name: val, width: '200px' };\n      })\n    : [];\n\n  return (\n      <DataGrid columns={columns} data={users} pageSize={10} options={options}\n        width=\"70vw\" height=\"35vh\" theme=\"blue-core\"\n      />\n  );\n}\n\n\n📡 useFetch() – Data Fetching Hook\nThis hook fetches 100 records from the fakerapi.it API. You can optionally pass an endpoint (books, users, etc.):\nimport { useEffect, useState } from 'react';\nimport { trackPromise } from 'react-data-grid-lite';\n\nexport const useFetch = (api = 'books') => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const promise = fetch(`https://fakerapi.it/api/v2/${api}?_quantity=100`)\n      .then(response => response.json())\n      .then(response => { setData(response.data); });\n\n    trackPromise(promise);\n  }, []);\n\n  return data;\n};\n\n\n📌 Notes\n\nYou can switch the API endpoint (e.g. books, users, companies, etc.) as supported by fakerapi.it.\nThe trackPromise utility is built into react-data-grid-lite.\n\nIt helps manage loading states during asynchronous operations like data fetching.\nIt integrates well with custom loading components or libraries like react-promise-tracker for showing spinners or loaders."
  },
  {
    "title": "🖇️ Column Control",
    "url": "example-4.html",
    "content": "This example demonstrates advanced column configuration using the react-data-grid-lite component, with the first name and last name merged into a single Name field using concatColumns. It also includes fixed columns, selective visibility, and both action buttons.\n\n✅ Key Features\n\nCombined Columns: firstname and lastname are joined into a Name column.\nFixed Column: ID is pinned to the left.\nResizable Column: UUID column can be resized.\nSelective Visibility: Most unused columns are hidden.\nAction Buttons: Edit and Delete actions are enabled.\nCustom Styling: Assigns a custom CSS class (customColumn) to the column for targeted styling via external stylesheets.\nTheming: Uses medi-glow theme.\n\n\n🧩 Grid Component Code\nimport React from 'react';\nimport DataGrid from 'react-data-grid-lite';\nimport { useFetch } from '../data';\n\nconst options = {\n  actionColumnAlign: 'right',\n  editButton: { event: (e, row) => { alert('Edit Button clicked!'); console.log(row); }},\n  deleteButton: { event: (e, row) => { alert('Delete Button clicked!'); console.log(row); }}\n};\n\nexport default function Grid() {\n  const users = useFetch(\"users\");\n  const columns = users?.length > 0 ? Object.keys(users[0])?.map((val) => {\n    if (val.toLowerCase() === 'id')\n      return { name: val, alias: 'ID', width: '100px', fixed: true };\n    else if (val.toLowerCase() === 'uuid')\n      return { name: val, alias: 'UUID', width: '400px', resizable: true };\n    else if (['email', 'website', 'image'].includes(val.toLowerCase()))\n      return { name: val, width: '200px', class:'customColumn' };\n    else if (val.toLowerCase() === 'firstname')\n      return { name: val, alias: 'Name', concatColumns: { columns: ['firstname', 'lastname'] }};\n    else return { name: val, hidden: true };\n  }) : [];\n\n  return (\n    <DataGrid columns={columns} data={users} pageSize={10} options={options} width=\"70vw\"\n        height=\"35vh\" theme=\"medi-glow\" />\n  );\n}"
  }
]